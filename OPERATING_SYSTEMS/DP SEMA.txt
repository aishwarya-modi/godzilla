#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>
#include <sys/unistd.h>
#define N           5
#define LEFT        (i+N-1)%N
#define RIGHT       (i+1)%N
#define THINKING    0
#define HUNGRY      1
#define EATING      2
int state[N];
sem_t mutex;
sem_t s[N];
int Max=20,count=0;
void philosopher(int i){
    while (count<Max) {
        printf("Philosopher %d in Thinking State\n",i);
        take_forks(i);
        put_forks(i);
    }
}
void take_forks(int i){
    sem_wait(&mutex);
    state[i]=HUNGRY;
    printf("Philosopher %d in Hungry State\n",i);
    test(i);
    sem_post(&mutex);
    sem_wait(&s[i]);
}
void test(int i){
    if (state[i]==HUNGRY && state[LEFT]!=EATING && state[RIGHT]!=EATING) {
        state[i]=EATING;
        count++;
        printf("%d Philosopher %d in Eating State\n",count,i);
        sem_post(&s[i]);
    }
}
void put_forks(int i){
    sem_wait(&mutex);
    state[i]=THINKING;
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
void main() {
    pthread_t philos[N];
    sem_init(&mutex,0,1);
    for (int i = 0; i < N; i++){
        sem_init(&s[i],0,0);
    }
    for (int i = 0; i < N; i++)
        pthread_create(&philos[i],NULL,philosopher,i);
    for (int i = 0; i < N; i++)
        pthread_join(philos[i],NULL);
    sem_destroy(&mutex);
    for (int i = 0; i < N; i++)
        sem_destroy(&s[i]);
}


